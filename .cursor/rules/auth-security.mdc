---
description: Authentication and security patterns used in the SaaS starter kit
---
# Authentication & Security Patterns

## Authentication System
The app uses Clerk for authentication configured in [middleware.ts](mdc:middleware.ts) with multiple providers:
- **Email/Password**: Secure authentication with password policies
- **Magic Links**: Passwordless email authentication  
- **OAuth**: GitHub and Google social login
- **SAML SSO**: Enterprise SSO (requires Clerk Enterprise plan)
- **Two-Factor Auth**: Built-in 2FA support

## Session Management
- Sessions managed by Clerk's infrastructure
- Secure HTTP-only cookies and JWTs
- Automatic session refresh and expiry
- Multi-device session management
- Session revocation through Clerk dashboard

## Security Features
1. **Attack Protection** (Clerk Dashboard)
   - Bot protection with CAPTCHA
   - Brute force protection
   - Rate limiting
   - Suspicious IP blocking

2. **Password Policies** (Clerk Dashboard)
   - Configurable minimum length
   - Complexity requirements
   - Password history
   - Expiration policies

3. **Email Verification**
   - Built-in email verification
   - Customizable email templates
   - Automatic retry logic

4. **Organization Security**
   - Multi-tenancy with organizations
   - Role-based access control
   - Invitation-only team access
   - Domain allowlisting

5. **Security Headers** ([middleware.ts](mdc:middleware.ts))
   - CSP, HSTS, X-Frame-Options
   - Referrer Policy, CORS headers
   - Configurable via environment

## Authorization Patterns
1. **API Route Protection**
   ```typescript
   // Check session exists
   const user = await getCurrentUserWithTeam(req, res);
   if (!user) {
     return res.status(401).json({ error: 'Unauthorized' });
   }
   
   // Check team access
   await throwIfNoTeamAccess(req, res, teamId);
   
   // Check specific permissions
   await throwIfNotAllowed(user, 'team_webhook', 'create');
   ```

2. **Page Protection** ([middleware.ts](mdc:middleware.ts))
   - Public routes: auth pages, landing, webhooks
   - Protected routes enforced by Clerk middleware
   - Organization-specific routes validate membership

3. **RBAC System**
   - Roles: OWNER, ADMIN, MEMBER
   - Permissions defined in [lib/permissions.ts](mdc:lib/permissions.ts)
   - Clerk organization roles mapped to app roles
   - UI components use `AccessControl` wrapper

## Migration from NextAuth
- Session format compatible during migration
- User data synced via Clerk webhooks
- Gradual migration supported
- Database maintains user/team relationships

## Best Practices
- Use Clerk's built-in security features
- Configure organization settings properly
- Enable all relevant security features in Clerk dashboard
- Use `throwIfNotAllowed` for permission checks
- Validate input with Zod schemas
- Keep sensitive operations server-side
- Monitor Clerk webhook events
- Use environment-specific Clerk instances
